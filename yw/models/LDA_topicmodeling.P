
% FACT: program(program_id, program_name, qualified_program_name, begin_annotation_id, end_annotation_id).
program(1, 'LDA', 'LDA', 1, 50).
program(2, 'tf_calculation', 'LDA.tf_calculation', 11, 19).
program(3, 'LatentDirichletAllocation', 'LDA.LatentDirichletAllocation', 20, 39).
program(4, 'print_top_words', 'LDA.print_top_words', 40, 49).

% FACT: workflow(program_id).
workflow(1).

% FACT: function(program_id).

% FACT: has_subprogram(program_id, subprogram_id).
has_subprogram(1, 2).
has_subprogram(1, 3).
has_subprogram(1, 4).

% FACT: port(port_id, port_type, port_name, qualified_port_name, port_annotation_id, data_id).
port(1, 'in', 'file_valid', 'LDA<-file_valid', 2, 1).
port(2, 'param', 'n_components', 'LDA<-n_components', 4, 2).
port(3, 'param', 'n_top_words', 'LDA<-n_top_words', 5, 3).
port(4, 'in', 'random_state', 'LDA<-random_state', 6, 4).
port(5, 'in', 'max_iter', 'LDA<-max_iter', 7, 5).
port(6, 'in', 'learning_method', 'LDA<-learning_method', 8, 6).
port(7, 'in', 'learning_offset', 'LDA<-learning_offset', 9, 7).
port(8, 'out', 'topic_log', 'LDA->topic_log', 10, 8).
port(9, 'in', 'file_valid', 'LDA.tf_calculation<-file_valid', 13, 9).
port(10, 'out', 'tf', 'LDA.tf_calculation->tf', 15, 10).
port(11, 'out', 'tf_vectorizer', 'LDA.tf_calculation->tf_vectorizer', 17, 11).
port(12, 'param', 'n_components', 'LDA.LatentDirichletAllocation<-n_components', 22, 12).
port(13, 'param', 'tf', 'LDA.LatentDirichletAllocation<-tf', 23, 10).
port(14, 'param', 'tf_vectorizer', 'LDA.LatentDirichletAllocation<-tf_vectorizer', 25, 11).
port(15, 'in', 'max_iter', 'LDA.LatentDirichletAllocation<-max_iter', 27, 13).
port(16, 'in', 'learning_method', 'LDA.LatentDirichletAllocation<-learning_method', 29, 14).
port(17, 'in', 'learning_offset', 'LDA.LatentDirichletAllocation<-learning_offset', 31, 15).
port(18, 'in', 'random_state', 'LDA.LatentDirichletAllocation<-random_state', 33, 16).
port(19, 'out', 'lda', 'LDA.LatentDirichletAllocation->lda', 35, 17).
port(20, 'out', 'tf_feature_names', 'LDA.LatentDirichletAllocation->tf_feature_names', 37, 18).
port(21, 'in', 'lda', 'LDA.print_top_words<-lda', 42, 17).
port(22, 'in', 'tf_feature_names', 'LDA.print_top_words<-tf_feature_names', 45, 18).
port(23, 'param', 'n_top_words', 'LDA.print_top_words<-n_top_words', 47, 19).
port(24, 'out', 'topic_log', 'LDA.print_top_words->topic_log', 48, 20).

% FACT: port_alias(port_id, alias).
port_alias(10, 'term_frequency').
port_alias(11, 'term_frequency_vectorizer').
port_alias(13, 'term_frequency').
port_alias(14, 'term_frequency_vectorizer').
port_alias(19, 'LDA_model').
port_alias(20, 'TermFrequency_feature_names').
port_alias(21, 'LDA_model').
port_alias(22, 'TermFrequency_feature_names').

% FACT: port_uri_template(port_id, uri).

% FACT: has_in_port(block_id, port_id).
has_in_port(1, 1).
has_in_port(1, 2).
has_in_port(1, 3).
has_in_port(1, 4).
has_in_port(1, 5).
has_in_port(1, 6).
has_in_port(1, 7).
has_in_port(2, 9).
has_in_port(3, 12).
has_in_port(3, 13).
has_in_port(3, 14).
has_in_port(3, 15).
has_in_port(3, 16).
has_in_port(3, 17).
has_in_port(3, 18).
has_in_port(4, 21).
has_in_port(4, 22).
has_in_port(4, 23).

% FACT: has_out_port(block_id, port_id).
has_out_port(1, 8).
has_out_port(2, 10).
has_out_port(2, 11).
has_out_port(3, 19).
has_out_port(3, 20).
has_out_port(4, 24).

% FACT: data(data_id, data_name, qualified_data_name).
data(1, 'file_valid', '[file_valid]').
data(2, 'n_components', '[n_components]').
data(3, 'n_top_words', '[n_top_words]').
data(4, 'random_state', '[random_state]').
data(5, 'max_iter', '[max_iter]').
data(6, 'learning_method', '[learning_method]').
data(7, 'learning_offset', '[learning_offset]').
data(8, 'topic_log', '[topic_log]').
data(9, 'file_valid', 'LDA[file_valid]').
data(10, 'term_frequency', 'LDA[term_frequency]').
data(11, 'term_frequency_vectorizer', 'LDA[term_frequency_vectorizer]').
data(12, 'n_components', 'LDA[n_components]').
data(13, 'max_iter', 'LDA[max_iter]').
data(14, 'learning_method', 'LDA[learning_method]').
data(15, 'learning_offset', 'LDA[learning_offset]').
data(16, 'random_state', 'LDA[random_state]').
data(17, 'LDA_model', 'LDA[LDA_model]').
data(18, 'TermFrequency_feature_names', 'LDA[TermFrequency_feature_names]').
data(19, 'n_top_words', 'LDA[n_top_words]').
data(20, 'topic_log', 'LDA[topic_log]').

% FACT: channel(channel_id, data_id).
channel(1, 8).
channel(2, 9).
channel(3, 12).
channel(4, 10).
channel(5, 11).
channel(6, 13).
channel(7, 14).
channel(8, 15).
channel(9, 16).
channel(10, 17).
channel(11, 18).
channel(12, 19).
channel(13, 1).
channel(14, 2).
channel(15, 3).
channel(16, 4).
channel(17, 5).
channel(18, 6).
channel(19, 7).
channel(20, 20).

% FACT: port_connects_to_channel(port_id, channel_id).
port_connects_to_channel(24, 1).
port_connects_to_channel(9, 2).
port_connects_to_channel(12, 3).
port_connects_to_channel(10, 4).
port_connects_to_channel(13, 4).
port_connects_to_channel(11, 5).
port_connects_to_channel(14, 5).
port_connects_to_channel(15, 6).
port_connects_to_channel(16, 7).
port_connects_to_channel(17, 8).
port_connects_to_channel(18, 9).
port_connects_to_channel(19, 10).
port_connects_to_channel(21, 10).
port_connects_to_channel(20, 11).
port_connects_to_channel(22, 11).
port_connects_to_channel(23, 12).
port_connects_to_channel(9, 13).
port_connects_to_channel(12, 14).
port_connects_to_channel(23, 15).
port_connects_to_channel(18, 16).
port_connects_to_channel(15, 17).
port_connects_to_channel(16, 18).
port_connects_to_channel(17, 19).
port_connects_to_channel(24, 20).

% FACT: inflow_connects_to_channel(port_id, channel_id).
inflow_connects_to_channel(1, 2).
inflow_connects_to_channel(2, 3).
inflow_connects_to_channel(5, 6).
inflow_connects_to_channel(6, 7).
inflow_connects_to_channel(7, 8).
inflow_connects_to_channel(4, 9).
inflow_connects_to_channel(3, 12).
inflow_connects_to_channel(1, 13).
inflow_connects_to_channel(2, 14).
inflow_connects_to_channel(3, 15).
inflow_connects_to_channel(4, 16).
inflow_connects_to_channel(5, 17).
inflow_connects_to_channel(6, 18).
inflow_connects_to_channel(7, 19).

% FACT: outflow_connects_to_channel(port_id, channel_id).
outflow_connects_to_channel(8, 1).
outflow_connects_to_channel(8, 20).

% FACT: uri_variable(uri_variable_id, variable_name, port_id).
