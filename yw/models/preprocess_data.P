
% FACT: program(program_id, program_name, qualified_program_name, begin_annotation_id, end_annotation_id).
program(1, 'pre_process', 'pre_process', 1, 29).
program(2, 'tokenization', 'pre_process.tokenization', 8, 13).
program(3, 'stopwords_removal', 'pre_process.stopwords_removal', 14, 20).
program(4, 'filter_rules', 'pre_process.filter_rules', 21, 28).

% FACT: workflow(program_id).
workflow(1).

% FACT: function(program_id).

% FACT: has_subprogram(program_id, subprogram_id).
has_subprogram(1, 2).
has_subprogram(1, 3).
has_subprogram(1, 4).

% FACT: port(port_id, port_type, port_name, qualified_port_name, port_annotation_id, data_id).
port(1, 'in', 'raw_data', 'pre_process<-raw_data', 3, 1).
port(2, 'in', 'stopwords', 'pre_process<-stopwords', 4, 2).
port(3, 'in', 'regexr', 'pre_process<-regexr', 5, 3).
port(4, 'out', 'file_valid', 'pre_process->file_valid', 7, 4).
port(5, 'in', 'raw_data', 'pre_process.tokenization<-raw_data', 10, 5).
port(6, 'out', 'file_tokens', 'pre_process.tokenization->file_tokens', 11, 6).
port(7, 'in', 'stopwords', 'pre_process.stopwords_removal<-stopwords', 16, 7).
port(8, 'in', 'file_tokens', 'pre_process.stopwords_removal<-file_tokens', 18, 6).
port(9, 'out', 'clean_file', 'pre_process.stopwords_removal->clean_file', 19, 8).
port(10, 'in', 'regexr', 'pre_process.filter_rules<-regexr', 23, 9).
port(11, 'in', 'clean_file', 'pre_process.filter_rules<-clean_file', 25, 8).
port(12, 'out', 'file_valid', 'pre_process.filter_rules->file_valid', 26, 10).

% FACT: port_alias(port_id, alias).
port_alias(3, 'regular_expression').
port_alias(10, 'regular_expression').

% FACT: port_uri_template(port_id, uri).
port_uri_template(7, 'file:http://www.nltk.org/book/ch02.html').

% FACT: has_in_port(block_id, port_id).
has_in_port(1, 1).
has_in_port(1, 2).
has_in_port(1, 3).
has_in_port(2, 5).
has_in_port(3, 7).
has_in_port(3, 8).
has_in_port(4, 10).
has_in_port(4, 11).

% FACT: has_out_port(block_id, port_id).
has_out_port(1, 4).
has_out_port(2, 6).
has_out_port(3, 9).
has_out_port(4, 12).

% FACT: data(data_id, data_name, qualified_data_name).
data(1, 'raw_data', '[raw_data]').
data(2, 'stopwords', '[stopwords]').
data(3, 'regular_expression', '[regular_expression]').
data(4, 'file_valid', '[file_valid]').
data(5, 'raw_data', 'pre_process[raw_data]').
data(6, 'file_tokens', 'pre_process[file_tokens]').
data(7, 'stopwords', 'pre_process[stopwords]').
data(8, 'clean_file', 'pre_process[clean_file]').
data(9, 'regular_expression', 'pre_process[regular_expression]').
data(10, 'file_valid', 'pre_process[file_valid]').

% FACT: channel(channel_id, data_id).
channel(1, 4).
channel(2, 5).
channel(3, 7).
channel(4, 6).
channel(5, 9).
channel(6, 8).
channel(7, 1).
channel(8, 2).
channel(9, 3).
channel(10, 10).

% FACT: port_connects_to_channel(port_id, channel_id).
port_connects_to_channel(12, 1).
port_connects_to_channel(5, 2).
port_connects_to_channel(7, 3).
port_connects_to_channel(6, 4).
port_connects_to_channel(8, 4).
port_connects_to_channel(10, 5).
port_connects_to_channel(9, 6).
port_connects_to_channel(11, 6).
port_connects_to_channel(5, 7).
port_connects_to_channel(7, 8).
port_connects_to_channel(10, 9).
port_connects_to_channel(12, 10).

% FACT: inflow_connects_to_channel(port_id, channel_id).
inflow_connects_to_channel(1, 2).
inflow_connects_to_channel(2, 3).
inflow_connects_to_channel(3, 5).
inflow_connects_to_channel(1, 7).
inflow_connects_to_channel(2, 8).
inflow_connects_to_channel(3, 9).

% FACT: outflow_connects_to_channel(port_id, channel_id).
outflow_connects_to_channel(4, 1).
outflow_connects_to_channel(4, 10).

% FACT: uri_variable(uri_variable_id, variable_name, port_id).
